ls
str(ls)
str(lm)
x <- 1:10
str(x)
summary(x)
x <- 1:1000
summary(x) # this generally discribe the object x in a statistical form, that is by giving 5 number summary
str(x) # str is similar to summary. However, it descrive he object x generally, saying it is a int with certain values
?lm
?gl
x <- gl(10,3)
x
summary(x)
str(x)
load(dataset)
load("dataset")
library(datasets)
data <- airquality
head(data)
str(data)
summary(data)
s <- split(data,data$Month)
s
str(s)
summary(s)
m <- matrix(1:20, nrow = "2", ncol = "10")
m <- matrix(1:20, nrow = 2, ncol = 10)
m
summary(m)
str(m)
head(data)
str(data)
summary(data)
m <- matrix(1:20, nrow = 2, ncol = 10)
summary(m) #
str(m)
m
m[,1]
m[1,]
s <- split(data,data$Month)
str(s)
summary(s)
random.num1 <- rnorm(20)
summary(random.num1)
random.num1
random.num2 <- rnorm(20,10,2)
random.num2
random.num2
summary(random.num2)
sd(random.num2)
rpois(10)
rpois(10,1)
ppois(10,1)
ppois(2,2)
beta0 <- 0.5
beta1 <- 2
x <- rnorm(100)
error <- rnorm(100,0,2) # this is the noise in data
y <- beta0 + beta1 (x) + error
y <- beta0 + beta1*(x) + error
summary(y)
plot(x,y)
y <- beta0 + beta1*(x)
summary(y)
plot(x,y)
x <- rbinom(100,1,0.5)
x
set.seed(1)
x <- rbinom(100,1,0.5)
x <- rbinom(100,1,0.5)
set.seed(1)
x <- rbinom(100,1,0.5)
error <- rnorm(100,0,2)
y <- beta0 + beta1*(x) + error
summary(y)
plot(x,y) # thus, is we have the infomraiton of slope and intercepts, we can generate few randome variabels and some noise and test it
y <- beta0 + beta1*(x) # if i remove noise it must increase the correaltion
summary(y)
plot(x,y) #shows perfect correlation
set.seed(1)
x <- rnorm(100,0,1)
log.mu <- 0.5 + 0.3*(x)
y <- rpois(100,exp(log.mu))
y
plot(x,y)
set.seed(1)
sample(10)
sample(10)
sample(10)
set.seed(1)
sample(10)
sample(10)
sample(10)
sample(10)
set.seed(1)
sample(letters)
sample(letters,5)
sample(letters,5)
sample(letters,5)
set.seed(1)
sample(letters,5)
sample(letters,5)
set.seed(1)
sample(letters,5)
set.seed(1)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
sample(1:3,replace=TRUE)
sample(1:20,replace=TRUE)
sample(10) # generate random sample of 10 numbers
sample(letters,5) # generate randome 5 characters of alphabets
f <- function() {for(i in 1:100){
print(pradeep)
}
}
print("hi")
system.time()
f
system.time()
system.time(f)
f
f()
f <- function() {for(i in 1:100){
print("pradeep")
}
}
f()
system.time(f())
system.time(f())
system.time(f())
system.time(f())
load("D:/Courses/CSC423 - SAS & R - Data Analysis and Regression/SAS/Project/Project_R_Data.RData")
str(train)
model.temp <- lm(count~season+holiday+workingday+weather+temp+humidity+windspeed+casual+
hour+day+year, data = train)
summary(model.temp)
model_bckwrd <- step(model.temp,direction = "backward")
summary(model_bckwrd)
model_stepwise <- step(model.temp,direction = "both")
summary(model_stepwise)
plot(model.temp)
require(MPV)
require(MPV)
PRESS(model.temp)
PRESS(model_stepwise)
temp_predict = predict(model.temp,test)
boxplot(train$count~train$weather,xlab="Weather", ylab="count of users")
boxplot(train$count~train$weather,xlab="Count Predicted", ylab="Count Observed")
load("D:/Courses/CSC423 - SAS & R - Data Analysis and Regression/SAS/Project/Project_R_Data.RData")
train$hour=as.integer(train$hour)
test$hour=as.integer(test$hour)
require(rpart)
require(rattle)#these libraries will be used to get a good visual plot for the decision tree model. 
require(rpart.plot)
require(RColorBrewer)
require(rpart)
require(rattle)#these libraries will be used to get a good visual plot for the decision tree model. 
require(rpart.plot)
require(RColorBrewer)
d=rpart(registered~hour,data=train)
fancyRpartPlot(d)
data=rbind(train,test)
data$dp_reg=0
data$dp_reg[data$hour<8]=1
data$dp_reg[data$hour>=22]=2
data$dp_reg[data$hour>9 & data$hour<18]=3
data$dp_reg[data$hour==8]=4
data$dp_reg[data$hour==9]=5
data$dp_reg[data$hour==20 | data$hour==21]=6
data$dp_reg[data$hour==19 | data$hour==18]=7
data$year_part[data$year=='2011']=1
data$year_part[data$year=='2011' & data$month>3]=2
data$year_part[data$year=='2011' & data$month>6]=3
data$year_part[data$year=='2011' & data$month>9]=4
data$year_part[data$year=='2012']=5
data$year_part[data$year=='2012' & data$month>3]=6
data$year_part[data$year=='2012' & data$month>6]=7
data$year_part[data$year=='2012' & data$month>9]=8
table(data$year_part)
data$day_type=""
data$day_type[data$holiday==0 & data$workingday==0]="weekend"
data$day_type[data$holiday==1]="holiday"
data$day_type[data$holiday==0 & data$workingday==1]="working day"
data$weekend=0
data$weekend[data$day=="Sunday" | data$day=="Saturday" ]=1
data$weekend=0
data$weekend[data$day=="Sunday" | data$day=="Saturday"]=1
View(data)
train$hour=as.factor(train$hour)
test$hour=as.factor(test$hour)
set.seed(415)
fit1 <- randomForest(logreg ~ hour +workingday+day+holiday+ day_type +temp_reg+humidity+atemp+windspeed+season+weather+dp_reg+weekend+year+year_part, data=train,importance=TRUE, ntree=250)
str(data)
str(train)
d=rpart(registered~hour,data=test)
fancyRpartPlot(d)
d=rpart(registered~hour,data=train)
e=rpart(casual~hour,data=train)
fancyRpartPlot(e)
data=rbind(train,test)
data$dp_cas=0
data$dp_cas[data$hour>0 & data$hour<9]=1
data$dp_cas[data$hour>8 & data$hour<11]=2
data$dp_cas[data$hour>10 & data$hour<21]=3
data$dp_cas[data$hour>20 & data$hour<25]=4
train$hour=as.integer(train$hour) # convert hour to integer
test$hour=as.integer(test$hour) # modifying in both train and test data set
e=rpart(casual~hour,data=train)
fancyRpartPlot(e)
data=rbind(train,test)
data$dp_cas=0
data$dp_reg[data$hour==8]=1
data$dp_reg[data$hour==9]=2
data$dp_reg[data$hour==20 | data$hour==21]=3
data$dp_reg[data$hour==19 | data$hour==18]=4
load("D:/Courses/CSC423 - SAS & R - Data Analysis and Regression/SAS/Project/Project_R_Data.RData")
train$hour=as.integer(train$hour) # convert hour to integer
test$hour=as.integer(test$hour) # modifying in both train and test data set
require(rpart)
require(rattle)#these libraries will be used to get a good visual plot for the decision tree model
require(rpart.plot)
require(RColorBrewer)
d=rpart(registered~hour,data=train)
fancyRpartPlot(d)
# Nodes Creation - brought down from 24 levels of hours to 8 levels
data=rbind(train,test)
data$dp_reg=0
data$dp_reg[data$hour<8]=1
data$dp_reg[data$hour>=22]=2
data$dp_reg[data$hour>9 & data$hour<18]=3
data$dp_reg[data$hour==8]=4
data$dp_reg[data$hour==9]=5
data$dp_reg[data$hour==20 | data$hour==21]=6
data$dp_reg[data$hour==19 | data$hour==18]=7
e=rpart(casual~hour,data=train)
fancyRpartPlot(e)
data$dp_cas=0
data$dp_cas[data$hour==8]=1
data$dp_cas[data$hour==9]=2
data$dp_cas[data$hour==20 | data$hour==21]=3
data$dp_cas[data$hour==19 | data$hour==18]=4
data$year_part[data$year=='2011']=1
data$year_part[data$year=='2011' & data$month>3]=2
data$year_part[data$year=='2011' & data$month>6]=3
data$year_part[data$year=='2011' & data$month>9]=4
data$year_part[data$year=='2012']=5
data$year_part[data$year=='2012' & data$month>3]=6
data$year_part[data$year=='2012' & data$month>6]=7
data$year_part[data$year=='2012' & data$month>9]=8
table(data$year_part)
data$day_type=""
data$day_type[data$holiday==0 & data$workingday==0]="weekend"
data$day_type[data$holiday==1]="holiday"
data$day_type[data$holiday==0 & data$workingday==1]="working day"
data$weekend=0
data$weekend[data$day=="Sunday" | data$day=="Saturday"]=1
train=data[as.integer(substr(data$datetime,9,10))<20,]
test=data[as.integer(substr(data$datetime,9,10))>19,]
train$hour=as.factor(train$hour)
test$hour=as.factor(test$hour)
str(train)
set.seed(415)
install.packages("randomForest")
logreg <- log(test$registered)
logcas <- log(test$casual)
train$logreg <- log(test$registered)
train$logcas <- log(test$casual)
train$logreg <- ln(test$registered)
train$logreg <- log2(test$registered)
train$logreg <- log2(train$registered)
train$logcas <- log2(train$casual)
logcas <- NULL
logreg <- NULL
fit1 <- randomForest(logreg ~ hour +workingday+day+holiday+ day_type +temp_reg+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train,importance=TRUE, ntree=250)
require(randomForest)
require(randomForest)
fit1 <- randomForest(logreg ~ hour +workingday+day+holiday+ day_type +temp_reg+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train,importance=TRUE, ntree=250)
View(train)
View(train)
str(train)
fit1 <- randomForest(logreg ~ hour +workingday+day+holiday+ day_type +temp+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train,importance=TRUE, ntree=250)
fit1 <- lm(logreg ~ hour +workingday+day+holiday+ day_type +temp+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train,importance=TRUE, ntree=250)
fit1 <- lm(logreg ~ hour +workingday+day+holiday+ day_type +temp+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train)
str(train)
train$day_type=as.factor(train$day_type)
str(train)
fit1 <- lm(logreg ~ hour +workingday+day+holiday+ day_type +temp+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train)
fit1 <- lm(registered ~ hour +workingday+day+holiday+ day_type +temp+humidity+atemp+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train)
summary(fit1)
fit1 <- lm(registered ~ workingday+day+holiday+ day_type +temp+humidity+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train)
summary(fit1)
fit2 <- step(fit1,direction = "backward")
summ_fit2 <- summary(fit2);summ_fit2
fit1 <- lm(registered ~ workingday+holiday+ day_type +temp+humidity+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train)
summary(fit1)
fit1 <- lm(registered ~ workingday+holiday+ temp+humidity+windspeed+
season+weather+dp_reg+weekend+year+year_part, data=train)
summary(fit1)
fit3 <- lm(count~season+holiday+workingday+weather+temp+casual+
hour+day+year, data = train)
summary(fit3)
fit3 <- lm(count~season+holiday+workingday+weather+temp+casual+
hour+year, data = train)
summary(fit3)
fit3 <- lm(log(count)~season+holiday+workingday+weather+temp+casual+
hour+year, data = train)
summary(fit3)
fit3 <- lm(log(count)~season+holiday+workingday+weather+temp+casual+
hour+day+year, data = train)
summary(fit3)
plot(fit3)
fit4 <- step(fit3,direction = "backward")
summary(fit4)
install.packages("dplyr")
install.packages("circlize")
require(dplyr)
require(circlize)
# Create Fake Flight Information in a table
orig = c("IE","GB","US","ES","FI","US","IE","IE","GB")
dest = c("FI","FI","ES","ES","US","US","FI","US","IE")
mydf = data.frame(orig, dest)
# Create a Binary Matrix Based on mydf
mymat <- data.matrix(as.data.frame.matrix(table(mydf)))
# create the objects you want to link from to in your diagram
from <- rownames(mymat)
to <- colnames(mymat)
# Create Diagram by suppling the matrix
par(mar = c(1, 1, 1, 1))
chordDiagram(mymat, order = sort(union(from, to)), directional = TRUE)
circos.clear()
data.need <- cbind(final.chi.plot$id,final.chi.plot$name)
data.need.df <- as.data.frame(data.need)
data.need.unique <- unique(data.need.df)
data.need.order <- order(data.need.unique)
load("D:/Courses/CSC423 - SAS & R - Data Analysis and Regression/SAS/Project/Prady_23Nov2016_Data.RData")
summary(model6.final.std)
?download.file
setwd("D:/Courses/Coursera/Data Science/Getting and Cleaning Data/week-3")
if(!file.exists("./data")){dir.create("./data")}
url_link <- "https://data.baltimorecity.gov/Culture-Arts/Restaurants/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(url_link,method = "curl")
setwd("D:/Courses/Coursera/Data Science/Getting and Cleaning Data/week-3")
if(!file.exists("./data")){dir.create("./data")}
url_link <- "https://data.baltimorecity.gov/Culture-Arts/Restaurants/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(url_link,destfile="./data/restaurants.csv",method = "curl")
data.summary <- read.csv("restaurants.csv")
setwd("D:/Courses/Coursera/Data Science/Getting and Cleaning Data/week-3/data")
data.summary <- read.csv("restaurants.csv")
head(data.summary)
data.summary <- read.csv("Restaurants.csv")
head(data.summary)
data.summary <- read.csv("Restaurants.csv", header = TRUE)
head(data.summary)
head(data.summary,3)
tail(data.summary,3)
summary(data.summary)
str(data.summary)
quantile(data.summary$councilDistrict)
quantile(data.summary$councilDistrict, rm=TRUE)
?rm
quantile(data.su data.summary$councilDistrict,probs=c(0.5,0.75,0.9))
quantile(data.summary$councilDistrict,probs=c(0.5,0.75,0.9))
table(data.summary$zipCode)
table(data.summary$zipCode, useNA = "ifany")
table(data.summary$councilDistrict,data.summary$zipCode)
data.table <- table(data.summary$councilDistrict,data.summary$zipCode)
str(data.table)
is.na(data.summary$councilDistrict)
sum(is.na(data.summary$councilDistrict))
any(is.na(data.summary$councilDistrict))
all(data.summary$zipCode>0)
colSums(is.na(data.summary))
all(colSums(is.na(data.summary)))
all(colSums(is.na(data.summary))==0)
table(data.summary$zipCode %in% c('21212'))
table(data.summary$zipCode %in% c('21212','21213'))
data.summary[data.summary$zipCode %in% c('21212')]
data.summary[data.summary$zipCode %in% c('21212'),]
data.summary$zipCode %in% c('21212')
data("UCBAdmissions")
data.df_ucb <- as.data.frame(UCBAdmissions)
summary(data.df_ucb)
xtabs(Freq~Gender+Admit,data=data.df_ucb)
wrapbreak$replicate <- rep(1:9,len=54)
cross_table <- xtabs(Freq~Gender+Admit,data=data.df_ucb)
ftable(cross_table)
object.size(data.df_ucb)
print(object.size(data.df_ucb),units="Mb")
print(object.size(data.df_ucb),units="kb")
print(object.size(data.df_ucb),units="Kb")
print(object.size(data.df_ucb),units="Pb")
print(object.size(data.df_ucb),units="Kb")
head(data.summary)
s1 <- seq(1,10,by=2)
s1
seq(1,10, by=3)
s2 <- seq(1,10,length=3)
s2
s3 <- c(1,3,8,25,100)
s3
s3 <- c(1,3,8,25,100); seq(along=s3)
s3
seq(along=s3)
data.summary
head(data.summary,3)
data.summary$nearme <- data.summary$neighborhood %in% c('Roland Park','Homeland')
head(data.summary,3)
table(data.summary$nearme)
data.summary[data.summary$nearme,]
data.summary$zipwrong <- ifelse(data.summary$zipCode<0,TRUE,FALSE)
data.summary$zipwrong
table(data.summary$zipwrong)
table(data.summary$zipwrong,data.summary$zipCode<0)
data.summary$zipgroup < cut(data.summary$zipCode, breaks = quantile(data.summary$zipCode))
data.summary$zipgroup <- cut(data.summary$zipCode, breaks = quantile(data.summary$zipCode))
table(data.summary$zipgroup)
head(data.summary)
table(data.summary$zipgroup,data.summary$zipCode)
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
data.summary$zipgroup <- cut(data.summary$zipCode,g=4)
data.summary$zipgroup <- cut2(data.summary$zipCode,g=4)
table(data.summary$zipgroup)
data.summary$zipfactor <- factor(data.summary$zipCode)
data.summary$zipfactor[1:10]
class(data.summary$zipfactor)
factor_levels_creation <- sample(c('Yes','No'), size=10, replace=TRUE
factor_levels_creation <- sample(c('Yes','No'), size=10, replace=TRUE)
factor_levels_creation <- sample(c('Yes','No'), size=10, replace=TRUE)
factor_levels_creation
factor_levels <- factor(factor_levels_creation, levels=c('Yes','No'))
relevel(factor_levels, ref='Yes')
as.numeric(factor_levels)
abs(data.summary$councilDistrict)
install.packages("reshape2")
require(reshape2)
data("mtcars")
head(mtcars)
data.mtcars <- mtcars
data.mtcars$carname <- rownames(data.mtcars)
data.mtcars$carname
head(data.mtcars)
carmelt <- melt(data.mtcars, id=c("carname","gear","cyl"),measure.vars = c("mpg","hp"))
head(carmelt)
tail(carmelt)
View(carmelt)
View(mtcars)
carmelt <- melt(data.mtcars, id=c("carname","gear","cyl"),measure.vars = c("mpg","hp"))
cylData <- dcast(carmelt,cyl~variable)
print(cylData)
cylData <- dcast(carmelt,cyl~variable,mean)
cylData
data("InsectSprays")
data.insect <- InsectSprays
head(data.insect)
tapply(data.insect$count,data.insect$spray,sum)
split_ins <- split(data.insect$count,data.insect$spray)
split_ins
sprcount <- lapply(split_ins,sum)
sprcount
unlist(sprcount)
sapply(split_ins, sum)
ddply(data.insect,.(spray),summarize,sum=sum(count))
require(plyr)
ddply(data.insect,.(spray),summarize,sum=sum(count))
spraySums <- ddply(data.insect,.(spray),summarize,sum=ave(count,FUN=sum))
dim(spraySums)
setwd("D:/Courses/Coursera/Data Science/Getting and Cleaning Data/week-3/data")
setwd("D:/Courses/Coursera/Data Science/Getting and Cleaning Data/week-3/data")
link <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
#if(!dir.exists("./data")){dir.create("./data")}
download.file(link,destfile = "week3_1.csv",method = "CURL")
download.file(link,destfile = "week3_1.csv",method = "curl")
data.survey <- read.csv("week3_1.csv",header = TRUE)
head(data.survey,1)
install.packages("jpeg")
require(jpeg)
data.image <- readJPEG("getdata_jeff.jpg",native = TRUE)
quantile(data.image)
quantile(data.image,probs = c('0.3','0.8'))
quantile(data.image,probs = ('0.3','0.8'))
str(data.image)
quantile(data.image,probs = c('0.3','0.8'))
print(data.image)
quantile(data.image)
names(data.image)
head(data.image)
quantile(data.image,probs = c(0.3))
quantile(data.image,probs = c(0.3,0.8))
data.gdp <- read.csv(week3_created.csv)
data.gdp <- read.csv("week3_created.csv",header = TRUE)
head(data.gdp)
str(data.gdp)
quantile(data.gdp$Ranking)
quantile(data.gdp$Ranking,na.rm = TRUE
quantile(data.gdp$Ranking,na.rm = TRUE)
quantile(data.gdp$Ranking,na.rm = TRUE)
table(quantile(data.gdp$Ranking,na.rm = TRUE))
