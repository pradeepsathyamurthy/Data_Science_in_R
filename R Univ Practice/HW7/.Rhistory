fit <- lm(len ~ supp + dose, data = data.toothgrowth) # <- this is again a generic class
class(fit) # navigated by generic function
summary(fit) # navigated by generic function
summary.lm(fit) # navigated by generic function
# S3 vs S4 classes
# S3 is a old style class, it is quick, dirty and informal
# s4 is a new style class, rigorous and formal
# Most of the R objects are built in S3. However, objects constructed nowadays are in S4 class type
# S3 class approach is simple to implement
# Just add class name to an object, no formal requirements, just expect object to have right information
# S3 Class construction
# Step-1: Set class attribute of the object using class()
# Step-2: set methods by writing function with name 'generic.class'
#           generic => generic function name, class => class for the method
# Usage ============>>>>>>>>>>>>>>>>>>
# class(x) Get or set the class attributes of x
# unclass(x) Remove class attributes of x
# methods(generic.function) All available S3 methods for a generic function
# methods(class="class") Get all S3 methods for a particular class
# is(object) Return object's class and all super-classes
# is(object, class2) Tests if object is from class2
# str(object) Display the internal structure of an object
# Prof. Jost examples
# 1. Creating/instantiating a S3 Class object
k1 <- list(name="Alice", gender="F", age=11)
class(k1) = "Kid" # <- Setting the class attribute of the object using class(), that is basically we are changing the list object to a kid object
# Print the kids object created
print(k1)
k2 <- kid("Mark","M",12) # this will throw error because R knows there is a object called kid but it doesnt know how to behave or access it (basically it is not a class object)
# 2. General way is to first construct the class object and then use it
# Constructor to create a S3 class object, we are basically constructing the behaviour of kid class object
# now that we have created a kid object, we need to construct how it behaves
kid <- function(theName, theGender, theAge) {
theObject <- list(name=theName, gender=theGender, age=theAge) # repeating the same we done above but this time inside a constructor
class(theObject) = "Kid"
return(theObject)
}
# 3. Using the class object
k2 <- kid("Mark","M",12)
print(k2)
# 4. Visible and Invisible methods
# we build our custom methods above the generic methos which is available from R
# all print methods available in R can be seen through
methods(print)
# there are visible and non-visible methods, those with * are identified as non visible methods
# if a method is visible via methods(), its source code can be viewed by typing its name in R
print.data.frame # <- this is a visible methods, its source is displayed
print.zoo # print.zoo* is a non-visible, that is its source code cannot be viewed
getAnywhere(print.zoo) # <- however even a invisible methods can be viewded through a function called getAnywhere()
# 5. Defining custom methods above the generic function, it is going to be a custom print method
print.Kid <- function(xxx) {
cat(xxx$name, xxx$gender, xxx$age, "\n")
}
# using the custom print method
print(k1) # Generic method/Generic Function
print.Kid(k1) # Custom method/Custom Function
# Defining a method whose generic class do not exist
haveBirthday(k1)
rm(haveBirthday) # rm is used to remove a R object from existance, becareful while using this
# lets define it using the usemethod
# this is just a definition, a empty method shell is created
haveBirthday <- function(yyy) {
UseMethod("haveBirthday", yyy) # Usemethod is a generic function which is used to expose oops methods
}
# Now define our custom function derived from a custom function
# Name below must have the class name associated with method if you remove kid from haveBirthday.Kid, class object method will trrow error
haveBirthday.Kid <- function(theObject) {
theObject$age <- theObject$age + 1
return(theObject)
}
# Testing the newly created custom function
haveBirthday(k1)
haveBirthday(k2)
# For S3 classes, whenever a new method is defined,
# it is customary to define a default version of that method in case the method is called on the wrong type of object. For example
haveBirthday.default <- function(theObject) {
warning("Default haveBirthday method ",
"called with unrecognized object")
return(theObject)
}
haveBirthday('prady') # we need a default method defined to through exception when arguments passed to class method is not right
# Finally, we define accessor methods (getters) that return the values of the individual components name, gender, and age
getName <- function(theObject) {
UseMethod("getName", theObject)
}
getName(k1) # <- THis will return a error at this point as no applicable methods for getName is applied
# defining methods in getName
getName.Kid <- function(theObject) {
return(theObject$name)
}
getName(k1) # <- THis will not return the name
getAge <- function(theObject) {
UseMethod("getAge", theObject)
}
getAge.Kid <- function(theObject) {
return(theAge$name)
}
# This how the ansestor method works, I mean this how we define a getter method in R
################################################################################################################################
# Some more examples from book
# S3 class construction and usage
################################################################################################################################
# As a practice we will create a S3 class called infant
# This object will have growth details from birth to 36 months
# object will contain: 1. ID Number, 2. Gender, 3. dataframe of age, height and weight
# Instantiating a S3 class object
infant <- function(ID, sex, age, ht, wt){
out <- list(ID=ID,sex=sex,data=data.frame(Age=age,HT.cm=ht,ET.kg=wt))
class(out) <- "infant"
invisible(out)
}
# Instantiating method for infant class
print.infant <- function(object){
cat("ID =", object$ID, "\nSex =", object$sex, "\n")
print(object$data)
}
# Infant "data"
age = c(0, 3, 6, 12, 18, 24, 30, 36)
male.wt = c( 3.53, 6.39, 8.16, 10.46, 11.80, 12.74, 13.56, 14.33)
female.wt = c( 3.40, 5.86, 7.45, 9.67, 11.09, 12.13, 13.04, 13.87)
male.ht = c(49.99, 62.08, 67.86, 76.11, 82.41, 87.66, 92.13, 95.45)
female.ht = c(49.29, 60.46, 66.12, 74.40, 80.80, 86.20, 91.13, 94.43)
# Calling infant objects
x <- infant(1, "male", age, male.ht, male.wt)
y <- infant(2, "female", age, female.ht, female.wt)
class(x); class(y)
# Print infant objects
x; y
# Possible to create invalid objects with S3 classes
z <- infant(3, "male", c("0 mon", "3 mon"), c(49.99,62.08), c(3.53,6.39))
# R Learning from week-6 of Prof.Jost class
# http://facweb.cdm.depaul.edu/sjost/csc433/
# CSC 433 -- Apr 24, 2017
# Topics Discussed: control structures, if..else, do...while, for and nested for
# Our focus in this week is on control stuctures
########################################
# if - elseif - else
########################################
# R has similar coding stadards of C language
x <- 7
if(x>8) {
y <- "Greater than 7"
} else if(x<6){
y <- "Less than 7"
} else {
y <- "Value is 7"
}
print(y)
# writing in a different way
y <- if(x>5){
10
}else{y <- 0}
print(y)
########################################
# for loop
########################################
# Mostly commenly used for iteration over elements in a objects like vector and list
# it follows a python standard
for(i in 1:10){
print(i)
}
x <- 1:6
for(i in x){
print(x[i])
}
# Usage of seq_along() function
# Genrate a sequence based on x length
for(i in seq_along(x)){
print(x[i])
}
########################################
# Nested For loop
########################################
# restrict nesting of for loop to not more than 2, alternatively use functions
mat1 <- matrix(1:6,nrow=2,ncol=3)
for(i in seq_len(nrow(mat1))){
for(j in seq_len(ncol(mat1))){
print(mat1[i,j])
}
}
########################################
# while loop
########################################
x <- 0
while(x<6){
print("Value of x now is")
print(x)
x <- x+1
}
########################################
# repeat loop
########################################
# This is a define infinte loop
# It starts with a infinite loop and to exit we need to use break statements
# Generally not used in statistical studies, however look into this later
########################################
# next and break
########################################
# next can be corelated to continue in python, it will skip an iteration happening
# break is also same as python, is to exit a loop
x <- c(1:20)
for(i in x){
if(i<=10){
print(i)
break
}
print(i)
}
########################################
# Summary of control structures
########################################
# control structures like if, while and for allow to control the program structure
# infinite loops need to be generally avoided
# look into apply function and its usage
help("cat")
cat("hi value of x is>>>",x)
# Intro
# We saw about the control structures used to tweak the flow of a program execution
# THere are basically these control structures used in most of the programs and so in R as well
# 1. if-else
# 2. for loop
# 3. while loop
# if-else
x <- 10
if (x > 10){
y <- 11
} else if(x < 10){
y <- 9
} else{
y <- 10
}
cat("value of Y is >>>> ",y)
# for loop
x <- c("a","b","c","d","e")
for (i in x){
print(i)
}
m <- matrix(1:6,nrow = 2,ncol = 3)
for(i in seq_len(nrow(m))){
for(j in seq_len(ncol(m))){
print(m[i,j])
}
}
# While loop
y <- 0
x <- 0
while(x<10){
y <- y+1
print(y)
x <- x+1
}
# Next and break statement
y <- 0
x <- 0
while(x<10){
if(x==5){
x <- x+1
y <- y+1
next
}else if (x==10){
break
}else{
print(y)
}
y <- y+1
x <- x+1
}
save.image("D:/Courses/Coursera/Data_Science_in_R/R Univ Practice/Week3_Practice_R_Data.RData")
?Sys.time
?aggregate
print(cars)
aggregate(cars)
aggregate(cars$speed)
aggregate(cars, cars$speed, mean)
aggregate(cars, mean)
aggregate(cars, list(speed,dist),mean)
aggregate(cars, list(cars$speed,cars$dist),mean)
aggregate(cars, list(cars$speed),mean)
?attach
?table
?t
?ts
ChlorReads <- function(id_val, name_val, gender_val, ldl_val, hdl_val, trigl_val){
chlorReadsobject <- list(id=id_val, name=name_val, gender=gender_val, ldl=ldl_val, hdl=hdl_val, trigl=trigl_val)
class(chlorReadsobject) <- "ChlorReads"
return(chlorReadsobject)
}
plot.ChlorReads <- function(chlorReadsobject){
plotobject <- chlorReadsobject
x_names <- c("LDL","HDL","Triglycerides")
footer_notes <- paste("ID:",chlorReadsobject$id,"Name:", chlorReadsobject$name,"Gender:", chlorReadsobject$gender)
barplot(c(chlorReadsobject$ldl,chlorReadsobject$hdl,chlorReadsobject$trigl), names.arg = x_names,main="ChlorReads Readings",ylim = c(0,300),sub = footer_notes)
}
p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)
p1
setwd("D:/Courses/Coursera/Data_Science_in_R/R Univ Practice/HW7")
lst <- NULL
chlor <- read.table("chlor-reads.txt",header = TRUE)
for(i in 1:nrow(chlor)) {
lst[[i]] <- ChlorReads(chlor[i, ]$id, as.character(chlor[i, ]$name),
as.character(chlor[i, ]$gender), chlor[i, ]$ldl,
chlor[i, ]$hdl, chlor[i, ]$trigl)
}
for(i in 1:length(lst)){
plot(ChlorReads(lst[i]))
}
for(i in 1:length(lst)){
plot(lst[i])
}
lst[1]
as.character(lst[1])
as.vector(lst[1])
for(i in 1:length(lst)){
plot(as.vector(lst[i]))
}
as.vector(lst[i])
plot(lst[1])
lst[1]
data.frame(lst[1])
as.data.frame(lst[1])
plot(lst[1])
lst[1]
lst[[1]]
print.ChlorReads(lst[1])
print(lst[1])
print(lst[1][1])
cat(lst[1])
a <- c(1,2,3,4)
a_lst <- list(1,2,3,4)
a
a_lst
lst[1]
lst[1]$ldl
lst[1]$ldl
lst$id[1]
lst[1,1]
lst[1,2]
lst[[1]][[1]]
lst[1]
print(lst[1])
p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)  # <- Testing problem-1
class(p1)
class(lst[1])
lst[1]
print(lst[1])
print.ChlorReads <- function(chlorReadsobject){
if(chlorReadsobject$ldl >= 0 & chlorReadsobject$ldl < 200){
chlorReadsobject$ldl = paste0(chlorReadsobject$ldl,"")
} else if(chlorReadsobject$ldl >= 200 & chlorReadsobject$ldl < 240){
chlorReadsobject$ldl = paste0(chlorReadsobject$ldl,"+")
} else if (chlorReadsobject$ldl >= 240){
chlorReadsobject$ldl = paste0(chlorReadsobject$ldl,"*")
}
if(chlorReadsobject$hdl >= 0 & chlorReadsobject$hdl < 40){
chlorReadsobject$hdl = paste0(chlorReadsobject$hdl,"*")
} else if(chlorReadsobject$hdl >= 40 & chlorReadsobject$hdl < 60){
chlorReadsobject$hdl = paste0(chlorReadsobject$hdl,"+")
} else if (chlorReadsobject$hdl >= 60){
chlorReadsobject$hdl = paste0(chlorReadsobject$hdl,"")
}
if(chlorReadsobject$trigl >= 0 & chlorReadsobject$trigl < 150){
chlorReadsobject$trigl = paste0(chlorReadsobject$trigl,"")
} else if(chlorReadsobject$trigl >= 150 & chlorReadsobject$trigl < 200){
chlorReadsobject$trigl = paste0(chlorReadsobject$trigl,"+")
} else if (chlorReadsobject$trigl >= 200){
chlorReadsobject$trigl = paste0(chlorReadsobject$trigl,"*")
}
cat("ID:",chlorReadsobject$id,"Name:", chlorReadsobject$name,"Gender:", chlorReadsobject$gender, "\n" ,"LDL:", chlorReadsobject$ldl,"HDL:", chlorReadsobject$hdl,"Triglycerides:", chlorReadsobject$trigl,"\n")
}
p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)
p1
class(p1)
plot(p1)
print(lst[1])
class(lst[1])
class(lst[1]) <- "ChlorReads"
class(lst[1])
lst[1]
plot(lst[1])
p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)
print(p1)
class(p1)
print(lst[[1]])
class(lst[[1]])
# Problem-5.c
# Uses a for loop to print all of the ChlorReads objects in lst
for(j in 1:length(lst)){
print(lst[[j]])
}
for(k in 1:length(lst)){
plot(lst[[k]])
}
pdf(proj7SathyamurthyPradeep.pdf)
for(k in 1:length(lst)){
plot(lst[[k]])
}
dev.off()
pdf("proj7SathyamurthyPradeep.pdf")
for(k in 1:length(lst)){
plot(lst[[k]])
}
dev.off()
# Problem-1
# Constructor for ChlorReads object
# Create a constructor ChlorReads that inputs the fields:
# id, name, gender, ldl, hdl, and trigl and returns a ChlorReads object
ChlorReads <- function(id_val, name_val, gender_val, ldl_val, hdl_val, trigl_val){
chlorReadsobject <- list(id=id_val, name=name_val, gender=gender_val, ldl=ldl_val, hdl=hdl_val, trigl=trigl_val)
class(chlorReadsobject) <- "ChlorReads"
return(chlorReadsobject)
}
# Problem-2
# Define a print.ChlorReads method that prints a ChlorReads object like this
# > p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)
# > print(p1)
# ID: 9876  Name: Virgil  Gender: M
# LDL: 248* HDL: 45+  Triglycerides: 148
# LDL 0 to 200 Normal ""
# LDL 200 to 240 Borderline "+"
# LDL 240 and up High Risk "*"
print.ChlorReads <- function(chlorReadsobject){
if(chlorReadsobject$ldl >= 0 & chlorReadsobject$ldl < 200){
chlorReadsobject$ldl = paste0(chlorReadsobject$ldl,"")
} else if(chlorReadsobject$ldl >= 200 & chlorReadsobject$ldl < 240){
chlorReadsobject$ldl = paste0(chlorReadsobject$ldl,"+")
} else if (chlorReadsobject$ldl >= 240){
chlorReadsobject$ldl = paste0(chlorReadsobject$ldl,"*")
}
if(chlorReadsobject$hdl >= 0 & chlorReadsobject$hdl < 40){
chlorReadsobject$hdl = paste0(chlorReadsobject$hdl,"*")
} else if(chlorReadsobject$hdl >= 40 & chlorReadsobject$hdl < 60){
chlorReadsobject$hdl = paste0(chlorReadsobject$hdl,"+")
} else if (chlorReadsobject$hdl >= 60){
chlorReadsobject$hdl = paste0(chlorReadsobject$hdl,"")
}
if(chlorReadsobject$trigl >= 0 & chlorReadsobject$trigl < 150){
chlorReadsobject$trigl = paste0(chlorReadsobject$trigl,"")
} else if(chlorReadsobject$trigl >= 150 & chlorReadsobject$trigl < 200){
chlorReadsobject$trigl = paste0(chlorReadsobject$trigl,"+")
} else if (chlorReadsobject$trigl >= 200){
chlorReadsobject$trigl = paste0(chlorReadsobject$trigl,"*")
}
cat("ID:",chlorReadsobject$id,"Name:", chlorReadsobject$name,"Gender:", chlorReadsobject$gender, "\n" ,"LDL:", chlorReadsobject$ldl,"HDL:", chlorReadsobject$hdl,"Triglycerides:", chlorReadsobject$trigl,"\n")
}
#p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)
#print.ChlorReads(p1)
# Problem-3
# Define the method plot.ChlorReads that plots the data in the ChlorReads object like this
plot.ChlorReads <- function(chlorReadsobject){
plotobject <- chlorReadsobject
x_names <- c("LDL","HDL","Triglycerides")
footer_notes <- paste("ID:",chlorReadsobject$id,"Name:", chlorReadsobject$name,"Gender:", chlorReadsobject$gender)
barplot(c(chlorReadsobject$ldl,chlorReadsobject$hdl,chlorReadsobject$trigl), names.arg = x_names,main="ChlorReads Readings",ylim = c(0,300),sub = footer_notes)
}
#plot(p1)
# Problem-4
# Define the accessor methods getPatientInfo.ChlorReads and getChloresterol.ChlorReads
# First define the generic methods getPatientInfo and getCholesterol and
# the default methods getPatientInfo.default and getCholesterol.default. For example:
# getPatientInfo(p1)
# ID   Name   Gender
# 9876 Virgil M
# getChloresterol(p1)
# LDL HDL Trigl
# 208  45 148
# Generic method
getPatientInfo <- function(chlorReadsobject){
UseMethod("getPatientInfo",chlorReadsobject)
}
getChloresterol <- function(chlorReadsobject){
UseMethod("getChloresterol",chlorReadsobject)
}
getPatientInfo.ChlorReads <- function(chlorReadsobject){
patientInfo <- data.frame(chlorReadsobject[1],chlorReadsobject[2],chlorReadsobject[3])
return(patientInfo)
}
getChloresterol.ChlorReads <- function(chlorReadsobject){
chloresterolInfo <- data.frame(chlorReadsobject[4],chlorReadsobject[5], chlorReadsobject[6])
return(chloresterolInfo)
}
getPatientInfo.default <- function(chlorReadsobject){
warning("Check the Object passed for patient info")
return(chlorReadsobject)
}
getChloresterol.default <- function(chlorReadsobject){
warning("Check the Object passed for Chloresterol info")
return(chlorReadsobject)
}
p1 <- ChlorReads(9876, "Virgil", "M", 248, 45, 148)  # <- Testing problem-1
class(p1) # <- Testing problem-1
print(p1) # <- Testing problem-2
plot(p1) # <- Testing problem-3
getPatientInfo(p1)  # <- Testing problem-4
getChloresterol(p1) # <- Testing problem-4
getPatientInfo(1) # <- Testing problem-4
getChloresterol("prady") # <- Testing problem-4
setwd("D:/Courses/Coursera/Data_Science_in_R/R Univ Practice/HW7")
lst <- NULL
chlor <- read.table("chlor-reads.txt",header = TRUE)
for(i in 1:nrow(chlor)) {
lst[[i]] <- ChlorReads(chlor[i, ]$id, as.character(chlor[i, ]$name),
as.character(chlor[i, ]$gender), chlor[i, ]$ldl,
chlor[i, ]$hdl, chlor[i, ]$trigl)
}
for(j in 1:length(lst)){
print(lst[[j]])
}
pdf("proj7SathyamurthyPradeep.pdf")
for(k in 1:length(lst)){
plot(lst[[k]])
}
dev.off()
