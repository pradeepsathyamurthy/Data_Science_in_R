mini <- 0
for(i in data.validate.hosp.clean[,5]){
if((mini==0) || (i < mini)){
print(i)
mini <- i
}
}
#print(mini)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia==mininin),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
}
best("TX","heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("SC", "heart attack") #MUSC MEDICAL CENTER
best("NY", "pneumonia")
best("AK", "pneumonia")
setwd("D:/Courses/Coursera/R")
data <- read.csv("outcome-of-care-measures.csv",na.strings="Not Available",stringsAsFactors=FALSE )
rankhospital <- function (state,outcome,rank){
# Setting sample data, wil be deleted
#state <- "MD"
#outcome <- "heart attack"
#rank <- "worst"
# Read the data
validating_col <- c(2,7,11,17,23)
data.needed <- data[,validating_col]
#str(data.needed)
names(data.needed) <- c("Name","State","DR_Heart_Attack","DR_Heart_Failure","DR_Pneumonia")
# Check that state and outcome are valid
valid_states <- unique(data.needed[,2])
valid_outcome <- c("heart attack","heart failure","pneumonia")
for(i in valid_states){
if(state == i){
#print("valid state")
j <- 1
break
}else{
#print("invalid State")
j <-0
}
}
if(j==1){
print("Valid State")
}else{
stop("invalid state")
}
for(i in valid_outcome){
if(outcome == i){
#print("valid outcome")
k <- 1
break
}else{
#print("invalid outcome")
k<-0
}
}
if(k==1){
print("Valid outcome")
}else{
stop("invalid outcome")
}
# Heart Attack
if(outcome=="heart attack"){
#print(outcomes)
data.validate.rank <- data.needed[which(data.needed$State==state),]
data.validate.rank.clean <- na.omit(data.validate.rank)
data.validate.rank.clean <- data.validate.rank.clean[order(data.validate.rank.clean$DR_Heart_Attack,data.validate.rank.clean$Name),]
data.validate.rank.clean$RANK <- seq_len(nrow(data.validate.rank.clean))
if(class(rank)=="character"){
if(rank == "worst"){
rank.max <- max(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.max),]
return(result$Name[1])
}else if(rank == "best"){
rank.min <- min(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.min),]
return(result$Name[1])
}else{
print("Type a valid value for rank [Number]/worst/best")
}
}else if(class(rank)=="numeric"){
rank.max <- max(data.validate.rank.clean$RANK)
if(rank>rank.max){
return("NA")
}else{
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank),]
return(result$Name[1])
}
}
}
# Heart Failure
if(outcome=="heart failure"){
#print(outcomes)
data.validate.rank <- data.needed[which(data.needed$State==state),]
data.validate.rank.clean <- na.omit(data.validate.rank)
data.validate.rank.clean <- data.validate.rank.clean[order(data.validate.rank.clean$DR_Heart_Failure,data.validate.rank.clean$Name),]
data.validate.rank.clean$RANK <- seq_len(nrow(data.validate.rank.clean))
if(class(rank)=="character"){
if(rank == "worst"){
rank.max <- max(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.max),]
return(result$Name[1])
}else if(rank == "best"){
rank.min <- min(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.min),]
return(result$Name[1])
}else{
print("Type a valid value for rank [Number]/worst/best")
}
}else if(class(rank)=="numeric"){
rank.max <- max(data.validate.rank.clean$RANK)
if(rank>rank.max){
return("NA")
}else{
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank),]
return(result$Name[1])
}
}
}
# pneumonia
if(outcome=="pneumonia"){
#print(outcomes)
data.validate.rank <- data.needed[which(data.needed$State==state),]
data.validate.rank.clean <- na.omit(data.validate.rank)
data.validate.rank.clean <- data.validate.rank.clean[order(data.validate.rank.clean$DR_Pneumonia,data.validate.rank.clean$Name),]
data.validate.rank.clean$RANK <- seq_len(nrow(data.validate.rank.clean))
if(class(rank)=="character"){
if(rank == "worst"){
rank.max <- max(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.max),]
return(result$Name[1])
}else if(rank == "best"){
rank.min <- min(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.min),]
return(result$Name[1])
}else{
print("Type a valid value for rank [Number]/worst/best")
}
}else if(class(rank)=="numeric"){
rank.max <- max(data.validate.rank.clean$RANK)
if(rank>rank.max){
return("NA")
}else{
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank),]
return(result$Name[1])
}
}
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)#
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
validating_col <- c(2,7,11,17,23)
data.needed <- data[,validating_col]
names(data.needed) <- c("Name","State","DR_Heart_Attack","DR_Heart_Failure","DR_Pneumonia")
state="TX"
rank=10
data.validate.rank <- data.needed[which(data.needed$State==state),]
View(data.validate.rank)
data.validate.rank.clean <- data.validate.rank[order(data.validate.rank$DR_Pneumonia,data.validate.rank$Name),]
View(data.validate.rank)
View(data.validate.rank.clean)
data.validate.rank.clean <- na.omit(data.validate.rank)
View(data.validate.rank.clean)
data.validate.rank.clean <- data.validate.rank[order(data.validate.rank$DR_Pneumonia,data.validate.rank$Name),]
View(data.validate.rank.clean)
rankhospital <- function (state,outcome,rank){
# Setting sample data, wil be deleted
#state <- "MD"
#outcome <- "heart attack"
#rank <- "worst"
# Read the data
validating_col <- c(2,7,11,17,23)
data.needed <- data[,validating_col]
#str(data.needed)
names(data.needed) <- c("Name","State","DR_Heart_Attack","DR_Heart_Failure","DR_Pneumonia")
# Check that state and outcome are valid
valid_states <- unique(data.needed[,2])
valid_outcome <- c("heart attack","heart failure","pneumonia")
for(i in valid_states){
if(state == i){
#print("valid state")
j <- 1
break
}else{
#print("invalid State")
j <-0
}
}
if(j==1){
print("Valid State")
}else{
stop("invalid state")
}
for(i in valid_outcome){
if(outcome == i){
#print("valid outcome")
k <- 1
break
}else{
#print("invalid outcome")
k<-0
}
}
if(k==1){
print("Valid outcome")
}else{
stop("invalid outcome")
}
# Heart Attack
if(outcome=="heart attack"){
#print(outcomes)
data.validate.rank <- data.needed[which(data.needed$State==state),]
data.validate.rank.clean <- na.omit(data.validate.rank)
data.validate.rank.clean <- data.validate.rank.clean[order(data.validate.rank.clean$DR_Heart_Attack,data.validate.rank.clean$Name),]
data.validate.rank.clean$RANK <- seq_len(nrow(data.validate.rank.clean))
if(class(rank)=="character"){
if(rank == "worst"){
rank.max <- max(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.max),]
return(result$Name[1])
}else if(rank == "best"){
rank.min <- min(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.min),]
return(result$Name[1])
}else{
print("Type a valid value for rank [Number]/worst/best")
}
}else if(class(rank)=="numeric"){
rank.max <- max(data.validate.rank.clean$RANK)
if(rank>rank.max){
return("NA")
}else{
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank),]
return(result$Name[1])
}
}
}
# Heart Failure
if(outcome=="heart failure"){
#print(outcomes)
data.validate.rank <- data.needed[which(data.needed$State==state),]
data.validate.rank.clean <- na.omit(data.validate.rank)
data.validate.rank.clean <- data.validate.rank.clean[order(data.validate.rank.clean$DR_Heart_Failure,data.validate.rank.clean$Name),]
data.validate.rank.clean$RANK <- seq_len(nrow(data.validate.rank.clean))
if(class(rank)=="character"){
if(rank == "worst"){
rank.max <- max(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.max),]
return(result$Name[1])
}else if(rank == "best"){
rank.min <- min(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.min),]
return(result$Name[1])
}else{
print("Type a valid value for rank [Number]/worst/best")
}
}else if(class(rank)=="numeric"){
rank.max <- max(data.validate.rank.clean$RANK)
if(rank>rank.max){
return("NA")
}else{
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank),]
return(result$Name[1])
}
}
}
# pneumonia
if(outcome=="pneumonia"){
#print(outcomes)
state="TX"
rank=10
data.validate.rank <- data.needed[which(data.needed$State==state),]
data.validate.rank.clean <- data.validate.rank[order(data.validate.rank$DR_Pneumonia,data.validate.rank$Name),]
data.validate.rank.clean <- na.omit(data.validate.rank)
data.validate.rank.clean <- data.validate.rank[order(data.validate.rank$DR_Pneumonia,data.validate.rank$Name),]
#data.validate.rank.clean <- data.validate.rank.clean[order(data.validate.rank.clean$DR_Pneumonia,data.validate.rank.clean$Name),]
data.validate.rank.clean$RANK <- seq_len(nrow(data.validate.rank.clean))
if(class(rank)=="character"){
if(rank == "worst"){
rank.max <- max(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.max),]
return(result$Name[1])
}else if(rank == "best"){
rank.min <- min(data.validate.rank.clean$RANK)
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank.min),]
return(result$Name[1])
}else{
print("Type a valid value for rank [Number]/worst/best")
}
}else if(class(rank)=="numeric"){
rank.max <- max(data.validate.rank.clean$RANK)
if(rank>rank.max){
return("NA")
}else{
result <- data.validate.rank.clean[which(data.validate.rank.clean$RANK==rank),]
return(result$Name[1])
}
}
}
}
rankhospital("TX", "pneumonia", 10)
setwd("D:/Courses/Coursera/R")
outcome <- read.csv("outcome-of-care-measures.csv",na.strings="Not Available",stringsAsFactors=FALSE )
validating_col <- c(2,7,11,17,23)
data.best <- outcome[,validating_col]
state="AK"
data.validate.hosp <- data.best[which(data.best$State==state),]
View(data.validate.hosp)
data.validate.hosp.clean <- data.validate.hosp[order(data.validate.hosp$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,data.validate.hosp$Hospital.Name),]
View(data.validate.hosp.clean)
data.validate.hosp.clean <- na.omit(data.validate.hosp)
View(data.validate.hosp.clean)
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- data.validate.hosp[order(data.validate.hosp$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,data.validate.hosp$Hospital.Name),]
View(data.validate.hosp.clean)
best <- function(state,outcomes){
# Read the data
validating_col <- c(2,7,11,17,23)
data.best <- outcome[,validating_col]
data.best[,1] <- as.character(data.best[,1])
data.best[,2] <- as.character(data.best[,2])
data.best[,3] <- as.numeric(data.best[,3])
data.best[,4] <- as.numeric(data.best[,4])
data.best[,5] <- as.numeric(data.best[,5])
# Check that state and outcome are valid
valid_states <- unique(data.best[,2])
valid_outcome <- c("heart attack","heart failure","pneumonia")
for(i in valid_states){
if(state == i){
#print("valid state")
j <- 1
break
}else{
#print("invalid State")
j <-0
}
}
if(j==1){
print("Valid State")
}else{
stop("invalid state")
}
for(i in valid_outcome){
if(outcomes == i){
#print("valid outcome")
k <- 1
break
}else{
#print("invalid outcome")
k<-0
}
}
if(k==1){
print("Valid outcome")
}else{
stop("invalid outcome")
}
# Return the hospital Name in that state with lowest 30 days death rate
# Heart Attack
if(outcomes=="heart attack"){
#print(outcomes)
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- na.omit(data.validate.hosp)
mini <- 0
for(i in data.validate.hosp.clean[,3]){
if((mini==0) || (i < mini)){
#print(i)
mini <- i
}
}
print(mini)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==mini),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
# heart failure
if(outcomes=="heart failure"){
#print(outcomes)
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- na.omit(data.validate.hosp)
mini <- 0
for(i in data.validate.hosp.clean[,4]){
if((mini==0) || (i < mini)){
#print(i)
mini <- i
}
}
print(mini)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure==mini),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
# pneumonia
if(outcomes=="pneumonia"){
#print(outcomes)
#state="AK"
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- data.validate.hosp[order(data.validate.hosp$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,data.validate.hosp$Hospital.Name),]
mininin <- min(data.validate.hosp.clean[,5],na.rm=TRUE)
print(mininin)
mini <- 0
for(i in data.validate.hosp.clean[,5]){
if((mini==0) || (i < mini)){
print(i)
mini <- i
}
}
#print(mini)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia==mininin),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
}
best("AK", "pneumonia")
setwd("D:/Courses/Coursera/R")
outcome <- read.csv("outcome-of-care-measures.csv",na.strings="Not Available",stringsAsFactors=FALSE )
best("AK", "pneumonia")
best <- function(state,outcomes){
# Read the data
validating_col <- c(2,7,11,17,23)
data.best <- outcome[,validating_col]
data.best[,1] <- as.character(data.best[,1])
data.best[,2] <- as.character(data.best[,2])
data.best[,3] <- as.numeric(data.best[,3])
data.best[,4] <- as.numeric(data.best[,4])
data.best[,5] <- as.numeric(data.best[,5])
# Check that state and outcome are valid
valid_states <- unique(data.best[,2])
valid_outcome <- c("heart attack","heart failure","pneumonia")
for(i in valid_states){
if(state == i){
#print("valid state")
j <- 1
break
}else{
#print("invalid State")
j <-0
}
}
if(j==1){
print("Valid State")
}else{
stop("invalid state")
}
for(i in valid_outcome){
if(outcomes == i){
#print("valid outcome")
k <- 1
break
}else{
#print("invalid outcome")
k<-0
}
}
if(k==1){
print("Valid outcome")
}else{
stop("invalid outcome")
}
# Return the hospital Name in that state with lowest 30 days death rate
# Heart Attack
if(outcomes=="heart attack"){
#print(outcomes)
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- na.omit(data.validate.hosp)
mini <- 0
for(i in data.validate.hosp.clean[,3]){
if((mini==0) || (i < mini)){
#print(i)
mini <- i
}
}
print(mini)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==mini),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
# heart failure
if(outcomes=="heart failure"){
#print(outcomes)
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- na.omit(data.validate.hosp)
mini <- 0
for(i in data.validate.hosp.clean[,4]){
if((mini==0) || (i < mini)){
#print(i)
mini <- i
}
}
print(mini)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure==mini),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
# pneumonia
if(outcomes=="pneumonia"){
#print(outcomes)
#state="AK"
data.validate.hosp <- data.best[which(data.best$State==state),]
data.validate.hosp.clean <- data.validate.hosp[order(data.validate.hosp$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,data.validate.hosp$Hospital.Name),]
mininin <- min(data.validate.hosp.clean[,5],na.rm=TRUE)
# print(mininin)
result <- data.validate.hosp.clean[which(data.validate.hosp.clean$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia==mininin),]
return(sort(result$Hospital.Name,decreasing = FALSE)[1])
}
}
best("AK", "pneumonia")
